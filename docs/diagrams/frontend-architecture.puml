@startuml Frontend Architecture

' Main components
package "Frontend Application" {
  component "App" as App
  
  package "Core" {
    component "Router" as Router
    component "Svelte Stores" as Store
    component "Authentication" as Auth
    component "API Client" as API
    component "Local Storage" as Storage
  }
  
  package "Pages" {
    component "Dashboard" as Dashboard
    component "Login/Register" as LoginRegister
    component "Templates" as Templates
    component "Decks" as Decks
    component "Flashcards" as Flashcards
    component "Review" as Review
    component "Classes" as Classes
    component "Settings" as Settings
  }
  
  package "Components" {
    component "Navigation" as Nav
    component "UI Kit" as UIKit
    component "Forms" as Forms
    component "Visualizations" as Viz
    component "Flashcard Renderer" as Renderer
    component "AI Interface" as AIInterface
  }
  
  package "Utils" {
    component "SRS Algorithm" as SRSUtil
    component "Data Transformers" as Transformers
    component "Error Handlers" as ErrorHandlers
    component "Analytics" as Analytics
    component "Localization" as i18n
  }
}

package "External Services" {
  component "PocketBase API" as BackendAPI
  component "FastAPI AI Service" as AIBackendAPI
  component "Authentication Provider" as AuthProvider
  component "GenAI Service" as GenAI
  component "Analytics Service" as AnalyticsService
}

' Relationships
App --> Router
App --> Store
App --> Auth

Router --> Dashboard
Router --> LoginRegister
Router --> Templates
Router --> Decks
Router --> Flashcards
Router --> Review
Router --> Classes
Router --> Settings

Dashboard --> Nav
Dashboard --> UIKit
Dashboard --> Viz

Templates --> Forms
Templates --> UIKit
Templates --> Renderer

Decks --> UIKit
Decks --> Forms
Decks --> Viz

Flashcards --> Renderer
Flashcards --> Forms
Flashcards --> AIInterface

Review --> Renderer
Review --> SRSUtil
Review --> Analytics

Classes --> UIKit
Classes --> Forms
Classes --> Viz

Community --> UIKit
Community --> Forms

AILab --> AIInterface
AILab --> Forms
AILab --> Renderer

Auth --> AuthProvider
API --> BackendAPI
API --> AIBackendAPI
AIInterface --> GenAI
Analytics --> AnalyticsService

' Data flow
Store --> API : API requests
API --> Store : API responses
Store --> Storage : Persist data
Storage --> Store : Load data
SRSUtil --> Store : Update card scheduling
Renderer --> Store : Get flashcard data
Forms --> Store : Update data
Analytics --> AnalyticsService : Send events

' State management details
note right of Store
  **Svelte Store Structure:**
  
  - auth: User authentication state
  - templates: Template definitions
  - decks: User's flashcard decks
  - flashcards: Individual flashcards
  - reviews: Review history and statistics
  - classes: Educational classes
  - community: Community content
  - ai: AI service state and history
  - ui: UI state (theme, preferences)
  
  Uses Svelte's built-in store mechanisms:
  - writable stores for mutable state
  - readable stores for derived state
  - custom stores for complex logic
endnote

' Component architecture details
note bottom of UIKit
  **shadcn/svelte Components:**
  
  - Based on Bits UI primitives
  - Styled with Tailwind CSS
  - Accessible by default (WCAG compliant)
  - Themeable via CSS variables
  - Component variants via tailwind-variants
endnote

' Data flow details
note right of API
  **API Client Features:**
  
  - Automatic token management
  - Request/response interceptors
  - Error handling and retry logic
  - Request cancellation
  - Cache management
  - Offline support with request queuing
  - Separate clients for PocketBase and FastAPI backends
endnote

@enduml
