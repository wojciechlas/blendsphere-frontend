@startuml "AI Integration"
allowmixing

' Configuration
skinparam handwritten false
skinparam monochrome false
skinparam packageStyle rectangle
skinparam shadowing false
skinparam linetype ortho

' Components
package "Frontend" {
  component "AI Prompt UI" as PromptUI
  component "Flashcard Generator" as FrontendGenerator
  component "AI Service Client" as AIClient
}

package "Backend" {
  component "AI Controller" as AIController
  component "Prompt Manager" as PromptManager
  component "Response Processor" as ResponseProcessor
}

cloud "External AI Service" {
  component "GenAI Model" as AIModel
  component "Content Analysis" as ContentAnalysis
  component "Flashcard Generation" as AIGenerator
}

database "Database" {
  component "AI Prompts Storage" as PromptsDB
  component "Generated Content" as ContentDB
}

' Relationships
PromptUI --> AIClient
AIClient --> AIController
AIController --> PromptManager
PromptManager --> AIModel
ResponseProcessor --> ContentDB
AIModel --> ContentAnalysis
ContentAnalysis --> AIGenerator

' Data Structures
class AIPromptRequest {
  +userId
  +content
  +targetLanguage
  +nativeLanguage
  +languageLevel
  +templateId
  +promptType
  +additionalContext
}

class AIPromptResponse {
  +id: string
  +status: string
  +generatedFlashcards: string[]
  +error: string
  +processingTime: number
  +usageTokens: number
}

class GeneratedFlashcard {
  +front: string
  +back: string
  +confidence: number
  +metadata: object
  +suggestedTags: string[]
}

class PromptTemplate {
  +id: number
  +name: string
  +template: string
  +placeholders: string[]
  +description: string
  +promptType: PromptType
  +modelId: string
}

enum PromptType {
  VOCABULARY_EXTRACTION
  SENTENCE_GENERATION
  TRANSLATION
  EXPLANATION
  GRAMMAR_ANALYSIS
  PRONUNCIATION_GUIDE
}

' Interactions
PromptUI -> AIClient : sends request
AIClient -> AIController : API call
AIController -> PromptManager : prepares prompt
PromptManager -> PromptsDB : stores prompt
PromptManager -> AIModel : sends formatted prompt
AIModel -> ContentAnalysis : processes content
ContentAnalysis -> AIGenerator : generates flashcards
AIGenerator -> ResponseProcessor : returns generated content
ResponseProcessor -> ContentDB : stores generated content
ResponseProcessor -> AIController : formats response
AIController -> AIClient : returns response
AIClient -> FrontendGenerator : displays results
FrontendGenerator -> PromptUI : updates UI

note right of PromptTemplate
  **Sample Prompt Template:**
  Given the text: {{content}}
  
  Extract key vocabulary items from this text.
  The student's native language is {{nativeLanguage}} 
  and they are learning {{targetLanguage}} 
  at level {{languageLevel}}.
  
  For each word, provide:
  1. The word in context
  2. A simple definition
  3. An example sentence
  4. Any grammar notes
  5. Pronunciation guide if applicable
endnote

note right of AIModel
  **Model Considerations:**
  - Token limits: ~4000 tokens per request
  - Rate limiting: Max 10 requests per minute
  - Cost optimization: Cache frequent requests
  - Error handling: Graceful degradation
  - Response formatting: Consistent JSON structure
endnote

@enduml
